{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","emotionArray","type","value","this","props","emotions","anger","disgust","fear","joy","sadness","className","map","item","index","toLocaleString","maximumFractionDigits","minimumFractionDigits","React","Component","App","state","innercomp","rows","cols","id","mode","sentimentOutput","sentiment","renderTextArea","document","getElementById","setState","renderTextBox","sendForSentimentAnalysis","url","Config","BASE_URL","axios","get","then","response","data","output","style","color","fontSize","sendForEmotionAnalysis","catch","err","console","log","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.9a0bcb2e.chunk.js","sourcesContent":["import React from 'react';\nimport './bootstrap.min.css';\n\nclass EmotionTable extends React.Component {\n    render() {\n        //changing the object to an array of objects so I can use .map()\n\n        let emotionArray = [\n            {type: \"Anger\", value: this.props.emotions.anger},\n            {type: \"Disgust\", value: this.props.emotions.disgust},\n            {type: \"Fear\", value: this.props.emotions.fear},\n            {type: \"Joy\", value: this.props.emotions.joy},\n            {type: \"Sadness\", value: this.props.emotions.sadness},\n        ];\n        \n        //warning log recomended me to use unique keys when mapping the array as shown below\n      return (  \n        <div>\n          <table className=\"table table-bordered\">\n            <tbody>\n                {emotionArray.map((item,index)=>{\n                    return (<tr key={index}>\n                        <td>{item.type}</td>\n                        <td>{item.value.toLocaleString(\"en-US\",{maximumFractionDigits:6,minimumFractionDigits:6})}</td>\n                    </tr>)\n                })}\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    \n}\nexport default EmotionTable;\n","import './bootstrap.min.css';\nimport './App.css';\nimport Config from './config.json';\nimport EmotionTable from './EmotionTable.js';\nimport React from 'react';\nimport axios from 'axios';\n\nclass App extends React.Component {\n  state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n            mode: \"text\",\n          sentimentOutput:[],\n          sentiment:true\n        }\n  \n  renderTextArea = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"url\") {\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"text\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    } \n  }\n\n  renderTextBox = ()=>{\n    document.getElementById(\"textinput\").value = \"\";\n    if(this.state.mode === \"text\") {\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\n      mode: \"url\",\n      sentimentOutput:[],\n      sentiment:true\n    })\n    }\n  }\n\n  sendForSentimentAnalysis = () => {\n    this.setState({sentiment:true});\n    let ret = \"\";\n    let url = Config.BASE_URL;\n\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response)=>{\n\n      //Include code here to check the sentiment and fomrat the data accordingly\n\n      this.setState({sentimentOutput:response.data});\n      let output = response.data;\n      if(response.data === \"positive\") {\n        output = <div style={{color:\"green\",fontSize:20}}>{response.data}</div>\n      } else if (response.data === \"negative\"){\n        output = <div style={{color:\"red\",fontSize:20}}>{response.data}</div>\n      } else {\n        output = <div style={{color:\"orange\",fontSize:20}}>{response.data}</div>\n      }\n      this.setState({sentimentOutput:output});\n    });\n  }\n\n  sendForEmotionAnalysis = () => {\n    this.setState({sentiment:false});\n    let ret = \"\";\n    let url = Config.BASE_URL;\n    if(this.state.mode === \"url\") {\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\n    } else {\n      url = url+\"/text/emotion?text=\"+document.getElementById(\"textinput\").value;\n    }\n    ret = axios.get(url);\n    ret.then((response)=>{\n        if (response.data === \"Bad Request\") {\n            this.setState({sentimentOutput: <p>Text cannot be empty.</p>});\n        } else {\n            this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\n        }\n    }).catch(err => console.log(err));\n  }\n  \n\n  render() {\n    return (  \n      <div className=\"App\">\n          <h1>Sentiment Analizer</h1>\n      <button className=\"btn btn-info\" onClick={this.renderTextArea}>Text</button>\n        <button className=\"btn btn-dark\"  onClick={this.renderTextBox}>URL</button>\n        <br/><br/>\n        {this.state.innercomp}\n        <br/>\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\n        <br/>\n            {this.state.sentimentOutput}\n      </div>\n    );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}